%{
#include <stdio.h>

extern int yylex();
void yyerror(const char *s);

#undef yywrap
#define yywrap() 0
%}

%token SUBMERGIR EMERGIR AJUSTAR_INCLINACAO ATIVAR_PROPULSOR AJUSTAR_PROFUNDIDADE AJUSTAR_POSICAO
%token VAR PRINTLN IF ELSE LOOP LESS_THAN GREATER_THAN EQUAL PLUS MINUS MULTIPLY DIVIDE
%token LPAREN RPAREN COMMA LBRACE RBRACE NEWLINE INT IDEN TIME

%union {
        int intValue;
        char* strValue;
}

%start PROGRAM

%%

PROGRAM : STATEMENT
        | PROGRAM STATEMENT;

BLOCK : LBRACE STATEMENT RBRACE;

STATEMENT : NEWLINE
          | ASSIGNMENT NEWLINE
          | PRINT NEWLINE
          | VARIABLE NEWLINE
          | SUBMARINE_CONTROLLER NEWLINE
          | SUBMARINE_COMMANDS NEWLINE
          | IF_STATEMENT NEWLINE
          | LOOP_STATEMENT NEWLINE;

SUBMARINE_CONTROLLER : SUBMERGIR | EMERGIR | AJUSTAR_INCLINACAO;

SUBMARINE_COMMANDS : ATIVAR_PROPULSOR LPAREN INT RPAREN
                   | AJUSTAR_PROFUNDIDADE LPAREN INT RPAREN
                   | AJUSTAR_POSICAO LPAREN COORDINATES RPAREN;

VARIABLE : VAR IDEN NEWLINE
         | VAR IDEN TYPE NEWLINE;

ASSIGNMENT : IDEN EQUAL EXPRESSION;

PRINT : PRINTLN LPAREN EXPRESSION RPAREN;

IF_STATEMENT : IF LPAREN BOOLEXP RPAREN BLOCK
             | IF LPAREN BOOLEXP RPAREN BLOCK ELSE BLOCK;

LOOP_STATEMENT : LOOP LPAREN BOOLEXP RPAREN BLOCK;

BOOLEXP : EXPRESSION
        | EXPRESSION LESS_THAN EXPRESSION
        | EXPRESSION GREATER_THAN EXPRESSION
        | EXPRESSION EQUAL EXPRESSION;

EXPRESSION : TERM
           | EXPRESSION PLUS TERM
           | EXPRESSION MINUS TERM;

TERM : FACTOR
     | TERM MULTIPLY FACTOR
     | TERM DIVIDE FACTOR;

FACTOR : PLUS FACTOR
       | MINUS FACTOR
       | INT
       | LPAREN EXPRESSION RPAREN
       | IDEN;

TYPE : INT | COORDINATES | TIME;

COORDINATES : LPAREN INT COMMA INT RPAREN;

%%

void yyerror(const char *s){
        extern int yylineno;
        extern char *yytext;

        printf("\n Erro (%s): s√≠mbolo \"%s\" (linha %d)\n", s, yytext, yylineno);
}

int main(){
        yyparse();
        return 0;
}
